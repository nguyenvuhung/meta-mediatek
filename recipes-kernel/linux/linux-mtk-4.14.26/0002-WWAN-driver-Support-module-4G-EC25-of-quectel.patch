From b65c50907b593fc62f80365764aad85edc809d51 Mon Sep 17 00:00:00 2001
From: hungnv9 <hungnv9@vng.com.vn>
Date: Sun, 12 Jan 2020 17:33:51 +0700
Subject: [PATCH 2/2] [WWAN driver]Support module 4G EC25 of quectel

---
 drivers/net/usb/qmi_wwan.c    | 155 ++++++++++++++++++++++++++++++++++++++++++
 drivers/usb/serial/option.c   |  53 +++++++++++++++
 drivers/usb/serial/usb_wwan.c |  13 ++++
 3 files changed, 221 insertions(+)

diff --git a/drivers/net/usb/qmi_wwan.c b/drivers/net/usb/qmi_wwan.c
index b163229..797d203 100644
--- a/drivers/net/usb/qmi_wwan.c
+++ b/drivers/net/usb/qmi_wwan.c
@@ -446,6 +446,75 @@ static const u8 default_modem_addr[ETH_ALEN] = {0x02, 0x50, 0xf3};
 
 static const u8 buggy_fw_addr[ETH_ALEN] = {0x00, 0xa0, 0xc6, 0x00, 0x00, 0x00};
 
+//Add for Quectel
+#if 1
+#include<linux/etherdevice.h>
+
+struct sk_buff *qmi_wwan_tx_fixup(struct usbnet *dev, struct sk_buff* skb, gfp_t flags)
+{
+    if(dev->udev->descriptor.idVendor != cpu_to_le16(0x2C7C))
+        return skb;
+
+    //Skip Ethernet header from message
+    if(skb_pull(skb, ETH_HLEN))
+    {
+        return skb;
+    }else{
+         dev_err(&dev->intf->dev, "Packet Dropped");
+    }
+
+    //Filter the packet out, release it
+    dev_kfree_skb_any(skb);
+    return NULL;
+}
+#include<linux/version.h>
+#if(LINUX_VERSION_CODE < KERNEL_VERSION(3,9,1))
+static int qmi_wwan_rx_fixup(struct usbnet *dev, struct sk_buff *skb)
+{
+    __be16 proto;
+    
+    if(dev->udev->descriptor.idVendor != cpu_to_le16(0x2C7C))
+        return 1;
+
+    /* This check is no longer done by usbnet */
+    if(skb->len < dev->net->hard_header_len)
+        return 0;
+
+    switch(skb->data[0] & 0xf0)
+    {
+        case 0x40:
+            proto = htons(ETH_P_IP);
+        break;
+        case 0x60:
+            proto = htons(ETH_P_IPV6);
+        break;
+        case 0x00:
+            if(is_multicast_ether_addr(skb->data))
+                return 1;
+            skb_reset_mac_header(skb);
+            goto fix_dest;
+        default:
+            return 1;
+    }
+
+    if(skb_headroom(skb) < ETH_HLEN)
+        return 0;
+    skb_push(skb, ETH_HLEN);
+    skb_reset_mac_header(skb);
+    eth_hdr(skb)->h_proto = proto;
+    memset(eth_hdr(skb)->h_source, 0, ETH_ALEN);
+fix_dest:
+    memcpy(eth_hdr(skb)->h_dest, dev->net->dev_addr, ETH_ALEN);
+    return 1;
+}
+
+/* Very simplistic detection of IPv4 or IPv6 headers */
+static bool possibly_iphdr(const char *data)
+{
+    return (data[0] & 0xd0) == 0x40;
+}
+#endif
+#endif
 /* Make up an ethernet header if the packet doesn't have one.
  *
  * A firmware bug common among several devices cause them to send raw
@@ -740,10 +809,54 @@ static int qmi_wwan_bind(struct usbnet *dev, struct usb_interface *intf)
 	}
 	dev->net->netdev_ops = &qmi_wwan_netdev_ops;
 	dev->net->sysfs_groups[0] = &qmi_wwan_sysfs_attr_group;
+        //Add for Quectel
+        #if 1
+
+        if(dev->udev->descriptor.idVendor == cpu_to_le16(0x2C7C))
+        {
+            dev_info(&intf->dev, "Quectel EC25&EC21&EG91&EG95&EG06&EP06&EM06&BG96&AG35 work on RawIP mode\n");
+            dev->net->flags |= IFF_NOARP;
+        #if(LINUX_VERSION_CODE < KERNEL_VERSION(3,9,1))
+        //make MAC addr easily distinguishable from IP header
+        
+        if(possibly_iphdr(dev->net->dev_addr))
+        {
+            dev->net->dev_addr[0] |= 0x02; //set local assignement bit
+            dev->net->dev_addr[0] &= 0xbf; //clear IP bit
+        }
+        #endif
+        usb_control_msg(interface_to_usbdev(intf), usb_sndctrlpipe(interface_to_usbdev(intf), 0), 
+        0x22, 0x21, 1, intf->cur_altsetting->desc.bInterfaceNumber, NULL, 0, 100);
+        }
+        #endif
 err:
 	return status;
 }
 
+#if 1 //Add for Quectel
+
+static int qmi_wwan_bind_shared(struct usbnet* dev, struct usb_interface *intf)
+{
+        if(dev->udev->descriptor.idVendor == cpu_to_le16(0x2C7C))
+        {
+            dev_info(&intf->dev, "Quectel EC25&EC21&EG91&EG95&EG06&EP06&EM06&BG96&AG35 work on RawIP mode\n");
+            dev->net->flags |= IFF_NOARP;
+        #if(LINUX_VERSION_CODE < KERNEL_VERSION(3,9,1))
+        //make MAC addr easily distinguishable from IP header
+        
+        if(possibly_iphdr(dev->net->dev_addr))
+        {
+            dev->net->dev_addr[0] |= 0x02; //set local assignement bit
+            dev->net->dev_addr[0] &= 0xbf; //clear IP bit
+        }
+        #endif
+        usb_control_msg(interface_to_usbdev(intf), usb_sndctrlpipe(interface_to_usbdev(intf), 0), 
+        0x22, 0x21, 1, intf->cur_altsetting->desc.bInterfaceNumber, NULL, 0, 100);
+        }
+}
+
+#endif
+
 static void qmi_wwan_unbind(struct usbnet *dev, struct usb_interface *intf)
 {
 	struct qmi_wwan_state *info = (void *)&dev->data;
@@ -831,7 +944,24 @@ static const struct driver_info	qmi_wwan_info = {
 	.unbind		= qmi_wwan_unbind,
 	.manage_power	= qmi_wwan_manage_power,
 	.rx_fixup       = qmi_wwan_rx_fixup,
+
+        #if 1 //Add for Quectel
+        .tx_fixup = qmi_wwan_tx_fixup,
+        #endif
+};
+#if 1 //Add for Quectel
+static const struct driver_info qmi_wwan_force_int4 = {
+        .tx_fixup = qmi_wwan_tx_fixup,
+        .rx_fixup = qmi_wwan_rx_fixup,
 };
+#endif
+
+#if 1 //Add for Quectel
+static const struct driver_info qmi_wwan_force_shared = {
+        .tx_fixup = qmi_wwan_tx_fixup,
+        .rx_fixup = qmi_wwan_rx_fixup,
+};
+#endif
 
 static const struct driver_info	qmi_wwan_info_quirk_dtr = {
 	.description	= "WWAN/QMI device",
@@ -968,6 +1098,31 @@ static const struct usb_device_id products[] = {
 		.driver_info = (unsigned long)&qmi_wwan_info,
 	},
 
+//Added for Quectel
+#if 1
+
+#ifndef QMI_FIXED_INTF
+#define QMI_FIXED_INTF(vend, prod, num) \
+        .match_flags        = USB_DEVICE_ID_MATCH_DEVICE | USB_DEVICE_ID_MATCH_INT_INFO, \
+        .idVendor           = vend, \
+        .idProduct          = prod, \
+        .bInterfaceClass    = 0xff, \
+        .bInterfaceSubClass = 0xff, \
+        .bInterfaceProtocol = 0xff, \
+        .driver_info        = (unsigned long)&qmi_wwan_force_int##num,
+#endif
+		{ QMI_FIXED_INTF(0x05C6, 0x9003, 4) }, /* Quectel UC20 */
+		{ QMI_FIXED_INTF(0x2C7C, 0x0125, 4) }, /* Quectel EC25 */
+		{ QMI_FIXED_INTF(0x2C7C, 0x0121, 4) }, /* Quectel EC21 */
+		{ QMI_FIXED_INTF(0x05C6, 0x9215, 4) }, /* Quectel EC20 */
+		{ QMI_FIXED_INTF(0x2C7C, 0x0191, 4) }, /* Quectel EG91 */
+		{ QMI_FIXED_INTF(0x2C7C, 0x0195, 4) }, /* Quectel EG95 */
+		{ QMI_FIXED_INTF(0x2C7C, 0x0306, 4) }, /* Quectel EG06/EP06/EM06 */
+		{ QMI_FIXED_INTF(0x2C7C, 0x0296, 4) }, /* Quectel BG96 */
+		{ QMI_FIXED_INTF(0x2C7C, 0x0435, 4) }, /* Quectel AG35 */
+
+#endif
+
 	/* 3. Combined interface devices matching on interface number */
 	{QMI_FIXED_INTF(0x0408, 0xea42, 4)},	/* Yota / Megafon M100-1 */
 	{QMI_FIXED_INTF(0x05c6, 0x6001, 3)},	/* 4G LTE usb-modem U901 */
diff --git a/drivers/usb/serial/option.c b/drivers/usb/serial/option.c
index dcf78a4..8102710 100644
--- a/drivers/usb/serial/option.c
+++ b/drivers/usb/serial/option.c
@@ -2096,6 +2096,8 @@ static struct usb_serial_driver option_1port_device = {
 #ifdef CONFIG_PM
 	.suspend           = usb_wwan_suspend,
 	.resume            = usb_wwan_resume,
+	/* Added by Quetel */
+	.reset_resume      = usb_wwan_resume,
 #endif
 };
 
@@ -2135,6 +2137,57 @@ static int option_probe(struct usb_serial *serial,
 	    iface_desc->bInterfaceClass != USB_CLASS_CDC_DATA)
 		return -ENODEV;
 
+	
+	/* Added by Quetel */
+	/* Quectel UC20's interface 4 can be used as USB network device */
+	if ((serial->dev->descriptor.idVendor == cpu_to_le16(0x05C6))
+			&& (serial->dev->descriptor.idProduct == cpu_to_le16(0x9003))
+			&& (serial->interface->cur_altsetting->desc.bInterfaceNumber >= 4))
+		return -ENODEV;
+	
+
+	/* Quectel EC20's interface 4 can be used as USB network device */
+	if ((serial->dev->descriptor.idVendor == cpu_to_le16(0x05C6))
+			&& (serial->dev->descriptor.idProduct == cpu_to_le16(0x9215))
+			&& (serial->interface->cur_altsetting->desc.bInterfaceNumber >= 4))
+		return -ENODEV;
+
+	/* Quectel EC25&EC21&EG91&EG95&EG06&EP06&EM06&BG96/AG35's interface 4 can be used as USB network device */
+	if ((serial->dev->descriptor.idVendor == cpu_to_le16(0x2C7C))
+			&& (serial->interface->cur_altsetting->desc.bInterfaceNumber >= 4))
+		return -ENODEV;
+	
+	#if 0
+	/* For USB Auto Suspend */
+	if ((serial->dev->descriptor.idVendor == cpu_to_le16(0x05C6))
+			&& (serial->dev->descriptor.idProduct == cpu_to_le16(0x9090)))
+	{
+		pm_runtime_set_autosuspend_delay(&serial->dev->dev, 3000);		
+		usb_enable_autosuspend(serial->dev);
+	}
+	
+	if ((serial->dev->descriptor.idVendor == cpu_to_le16(0x05C6))
+			&& (serial->dev->descriptor.idProduct == cpu_to_le16(0x9003)))
+	{
+		pm_runtime_set_autosuspend_delay(&serial->dev->dev, 3000);		
+		usb_enable_autosuspend(serial->dev);
+	}
+	
+	if ((serial->dev->descriptor.idVendor == cpu_to_le16(0x05C6))
+			&& (serial->dev->descriptor.idProduct == cpu_to_le16(0x9215)))
+	{
+		pm_runtime_set_autosuspend_delay(&serial->dev->dev, 3000);		
+		usb_enable_autosuspend(serial->dev);
+	}
+	
+	if (serial->dev->descriptor.idVendor == cpu_to_le16(0x2C7C))
+	{
+		pm_runtime_set_autosuspend_delay(&serial->dev->dev, 3000);		
+		usb_enable_autosuspend(serial->dev);
+	}
+				
+	#endif
+
 	/* Store the blacklist info so we can use it during attach. */
 	usb_set_serial_data(serial, (void *)blacklist);
 
diff --git a/drivers/usb/serial/usb_wwan.c b/drivers/usb/serial/usb_wwan.c
index 59bfcb3..9cd77a2 100644
--- a/drivers/usb/serial/usb_wwan.c
+++ b/drivers/usb/serial/usb_wwan.c
@@ -502,6 +502,19 @@ static struct urb *usb_wwan_setup_urb(struct usb_serial_port *port,
 			  usb_sndbulkpipe(serial->dev, endpoint) | dir,
 			  buf, len, callback, ctx);
 
+	/* Added by Quectel for zero packet */
+	if (dir == USB_DIR_OUT) {
+		struct usb_device_descriptor *desc = &serial->dev->descriptor;
+		if (desc->idVendor == cpu_to_le16(0x05C6) && desc->idProduct == cpu_to_le16(0x9090))
+			urb->transfer_flags |= URB_ZERO_PACKET;
+		if (desc->idVendor == cpu_to_le16(0x05C6) && desc->idProduct == cpu_to_le16(0x9003))
+			urb->transfer_flags |= URB_ZERO_PACKET;
+		if (desc->idVendor == cpu_to_le16(0x05C6) && desc->idProduct == cpu_to_le16(0x9215))
+			urb->transfer_flags |= URB_ZERO_PACKET;
+		if (desc->idVendor == cpu_to_le16(0x2C7C))
+			urb->transfer_flags |= URB_ZERO_PACKET;
+	}
+
 	return urb;
 }
 
-- 
2.7.4

